akka {
  loglevel = INFO
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  http {
    host-connection-pool {
      max-open-requests = 1024
      max-open-requests = ${?MAX_OPEN_REQUESTS_PER_TARGET}

      max-connections = 128
      max-connections = ${?MAX_CONNECTIONS_PER_TARGET}
    }

    client.parsing.max-content-length = 64m
    client.parsing.max-content-length = ${?MAX_CONTENT_LENGTH}

    server.parsing.max-content-length = 64m
    server.parsing.max-content-length = ${?MAX_CONTENT_LENGTH}

    server.request-timeout = 120s
    server.request-timeout = ${?REQUEST_TIMEOUT}
  }
}

gateway {
  interface = "0.0.0.0"
  port = 8080
  prefix = "api"
  prefix = ${?API_PREFIX}
}

dashboard {
  interface = "0.0.0.0"
  port = 8081
}

integration {
  authentication {
    host = "localhost"
    host = ${?AUTH_HOST} // auth-service-service.default
    port = 7070
    port = ${?AUTH_PORT} // 80
  }

  kubernetes {
    host = "localhost"
    host = ${?K8S_API_HOST}
    port = 8001
    port = ${?K8S_API_PORT}
    token = ""
    token = ${?K8S_API_TOKEN}
    # namespaces that are filtered down to in the client
    namespaces = ["default"]
  }

  polling.interval = 2 seconds
}


service-discovery {
  kubernetes {
    host = "localhost"
    host = ${?K8S_API_HOST}
    port = 8001
    port = ${?K8S_API_PORT}
    token = ""
    token = ${?K8S_API_TOKEN}
    # namespaces that are filtered down to in the client
    namespaces = ["default"]
  }

  polling.interval = 5 seconds
}

kamon {
  metric.tick-interval = 15 seconds

  environment {
    service = "api-gateway"

    tags {
      env-k8s-deployment-name = ${?K8S_ENV_DEPLOYMENT_NAME}
      env-k8s-namespace = ${?K8S_ENV_NAMESPACE}
      env-k8s-image-name = ${?K8S_ENV_IMAGE_NAME}
    }
  }

  modules {
    datadog-agent {
      enabled = false
    }

    datadog-trace-agent {
      enabled = false
    }

    datadog-api {
      enabled = false
      enabled = ${?DATADOG_ENABLED}
    }
  }

  instrumentation.akka.http {
    server {
      metrics.enabled = yes

      propagation {
        enabled = no
        channel = default
      }
      tracing {
        enabled = no
        span-metrics = off
      }
    }

    client {
      propagation {
        enabled = no
        channel = default
      }
      tracing {
        enabled = no
        span-metrics = off
      }
    }
  }

  datadog {
    environment-tags {
      include-instance = no
      include-host = no
    }

    api {
      # API endpoint to which metrics time series data will be posted.
      api-url = "https://app.datadoghq.com/api/v1/series"

      # Datadog API key to use to send metrics to Datadog directly
      # over HTTPS. The API key will be combined with the API URL
      # to get the complete endpoint used for posting time series
      # to Datadog.
      api-key = ""
      api-key = ${?DATADOG_API_KEY}

      # HTTP client timeout settings:
      #   - connect-timeout: how long to wait for an HTTP connection
      #     to establish before failing the request.
      #   - read-timeout: how long to wait for a read IO operation
      #     to complete before failing the request.
      #   - write-timeout: how long to wait for a write IO operation
      #     to complete before failing the request.
      #
      connect-timeout = 5 seconds
      read-timeout = 5 seconds
      write-timeout = 5 seconds
    }
  }
}
